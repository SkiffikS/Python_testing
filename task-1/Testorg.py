# -*- coding: utf-8 -*-

from pathlib import Path
import re
import glob


def get_file_list(Folder: str) -> list: # Функція для отримання усіх файлів із вказаної попки
    return glob.glob(f"{Folder}/*") # повертаємо список із шляхами відносними до функції


def read_matrix(filepath: str) -> list:
    # Функція для читання матриці із текстового файла
    with open(filepath, "r", encoding = "utf-8") as f: # Відкриваємо файл для чилання
        data = [[int(num) for num in line.split(',')] for line in f] # читаємо кожні числа між комами, якщо пропуск рядка то це наступний список

    return data # Повертаємо матрицю


def read_text(filepath: str) -> str:
    # Функція для читання тексту із текстового файла
    with open(filepath, "r", encoding="utf-8") as f:
        contents = f.read()
    #contents = contents.replace("\n", " ") # читаємо текст без пропусків рядків

    return contents # повертаємо текст


def read_abc(filepath: str) -> list:
    # Функція для читання чисел із текстового файла
    variables = {} # словник у який будемо додавати числа

    with open(filepath, encoding = "utf-8") as f: # Відкриваємо файл
        for line in f: # читаємо кожну лінію
            line = line.replace(" ", "") # заміняємо можливі пробіли у файлі
            name, value = line.split("=") # читаємо змінні таким чином що зліва знака "=" назва змінної, а з права її значення
            variables[name] = float(value) # поміщаємо ці змінні у словник

    a = variables["a"]
    b = variables["b"]
    c = variables["c"] # витягуємо із словника змінні

    return [a, b, c] # повертаємо список із змінними


def input_to_file(filepath: str, text) -> None:
    # Функція для запису результату у файл
    with open(filepath, "a", encoding = "utf-8") as f:
        f.write(text)


def FnSol1(filepath: str = None):
    # Завдання 1
    if filepath == "" or filepath == None: # якщо шлях не заданий
            filepath = r"Testing_files/Task_1/InData_1.txt" # використовуємо стандартний шлях
            print(f"Не заданий шлях, тому використаємо стандартний:\n{filepath}") # повідомляємо про це

    try: # Обробка усіх можливих помилок без завершення роботи программи

        txt = Path(filepath).read_text().replace("\n", " ") # Отримуємо текст із файла та заміняємо можливі пропуски рядка
        Number_list = [int(s) for s in re.findall(r"-?\d+\.?\d*", txt)] # отримуємо усі цифри із тексту

        Positive_numbers = 0 # Кількість додатніх чисел
        Negative_numbers = 0 # Кількість відємних чисел
        Negative_number_list = [] # Список відємних чисел

        for i in Number_list: # Проходимось по списку чисел

            if i >= 0: # якщо число більше за 0
                Positive_numbers += 1 # збільшуємо кількість додатніх чисел

            else: # якщо число менше за 0
                Negative_numbers += 1 # збільшеємо кількість відємних чисел
                Negative_number_list.append(i) # додаємо відємне число у окремий список

        Negative_number_average = sum(Negative_number_list)/len(Negative_number_list) # Середнє арифметичне відємних чисел

        result = [Positive_numbers, Negative_numbers, Negative_number_average] # Додаємо значення виконання задач у список у порядку завдань
        print(f"\nКількість додатніх чисел: {Positive_numbers}\nKількість відємних чисел: {Negative_numbers}\nСереднє арифметичне відємних чисел: {Negative_number_average}\n") # Виводимо зруччний для читання результат

        return result # Повертаємо список із значень виконання завдань

    except Exception as ex: # Якщо сталась помилка добавляємо її значення у змінну

        print(f"\n[!] Error: {ex}\n") # Виводимо значення змінної
        return [0, 0, 0] # Повертаємо список із 0(для продовження роботи программи та обходу можливих багів)


def FnSol2(a: int or float = None, b: int or float = None, c: int or float = None) -> str:
    # Завдання 2
    try: # Обробка усіх можливих помилок без завершення роботи программи

        if a == None:
            a = float(input("Введіть значенння числа 'a': ").replace(",", "."))
        if b == None:
            b = float(input("Введіть значенння числа 'b': ").replace(",", "."))
        if c == None:
            c = float(input("Введіть значенння числа 'c': ").replace(",", "."))
        # Перевіряємо чи нам задали числа, якщо ні то просимо ввести їх

        if a <= 0 or b <= 0 or c <= 0:
            # Якщо числа не є відрізками повертаємо відповідний результат
            result = "Ці числа не можуть бути довжинами відрізків\n"
            print(result)
            return result

        if a == b == c: # Якщо всі сторони рівні
            result = "рівносторонній трикутник"
            print(f"Із чисел '{a}, {b}, {c}' можна утворити '{result}'\n")

        elif a == b or b == c or c == a: # Якщо 2/3 сторони рівні
            result = "рівнобедрений трикутник"
            print(f"Із чисел '{a}, {b}, {c}' можна утворити '{result}'\n")
 
        else: # Якщо всі сторони різні
            result = "різносторонній трикутник"
            print(f"Із чисел '{a}, {b}, {c}' можна утворити '{result}'\n")

        return result # Повертаємо кінцевий результат

    except Exception as ex: # Якщо сталась помилка добавляємо її значення у змінну

        print(f"\n[!] Error: {ex}\n") # Виводимо значення змінної
        return "" # Повертаємо пустий рядок


def FnSol3(sentence: str = ""):
    # Завдання 3
    if sentence == "": # Якшо не задане речення
        sentence = "Ви не ввели речення тому замість речення буде цей текст" # використовуємо це речення

    try: # Обробка усіх можливих помилок без завершення роботи программи

        pattern = r"[^A-Za-zА-Яа-я ]+" # калібровка щоб вибрати великі і малі букви латинського алфавіту та кириллиці, також пробіли
        sentence = re.sub(pattern, "", sentence) # калібруємо текст
        words = sentence.split() # створюємо список із слів у тексті

        result = "" # змінна для кінцевого результату
        
        for word in words: # проходимось по списку слів
            result += word + "\n" # до кінцевого результату додаємо кожне слово та пропуск рядка

        print(f"\nРезультат:\n{result}") # Виводимо результат

        return result # повертаємо результат

    except Exception as ex: # Якщо сталась помилка добавляємо її значення у змінну

        print(f"\n[!] Error: {ex}\n") # Виводимо значення змінної
        return "" # Повертаємо пустий рядок


def FnSol4(matrix: list = None) -> float:
    # Завдання 4
    try: # Обробка усіх можливих помилок без завершення роботи программи

        if matrix == None:
            print("Не задана матриця!\n")
            return ""
        # Перевіряємо чи нам задана матриця, якщо ні то завершаємо функцію та виводимо відповідне повідомлення

        matrix_lenght = len(matrix) # кількість списків у основному списку
        submatrix_lenght = len(matrix[0]) # довжина одного підсписка
    
        maxSubmatrix = 0 # Максимальна сума "підматриці"
    
        # беремо кожен ряд як початковий
        for i in range(matrix_lenght):
    
            # беремо кожен стовпець як початковий
            for j in range(submatrix_lenght):
    
                # беремо кожен ряд як кінцевий ряд
                for k in range(i, matrix_lenght):
    
                    # беремо кожен стовпець як кінцевий стовпець
                    for l in range(j, submatrix_lenght):
    
                        # Зберігає суму підматриці
                        # яка має верхній лівий індекс(i, j)
                        # і нижній правий індекс (k, l)
                        sumSubmatrix = 0
    
                        # Ітеруємо підматрицю по рядках і обчислюємо її суму
                        for m in range(i, k + 1):
                            for n in range(j, l + 1):
                                sumSubmatrix += matrix[m][n]
    
                        # Зберігаємо максимальну суму
                        maxSubmatrix = max(maxSubmatrix, sumSubmatrix)

        print(f"Максимальна сума підматриць - {maxSubmatrix}\n") # Виводимо кінцевий результат
        return maxSubmatrix # Повертаємо результат

    except Exception as ex: # Якщо сталась помилка добавляємо її значення у змінну

        print(f"\n[!] Error: {ex}\n") # Виводимо значення змінної
        return 0 # Повертаємо пустий рядок


def Testorg():
    # Загальна функція Testorg
    print("1 - FnSol1\n2 - FnSol2\n3 - FnSol3\n4 - FnSol4\nq - exit\n") # Виводимо в консоль дії і їх індекси
 
    while True: # Безкінечний цикл для постійної перевірки функцій
        function = input("Введіть функцію яку хочете виконати: ") # Просимо користувача ввести індекс функції

        if function == "1": # Якщо користувач вводить 1
            print("\nЗадача 1. З файла читають цілі числа різних знаків. Послідовність чисел закінчується нулем, наприклад:\n3 28 -4 901 666 -25 -25 700 -1 0\nОбчислити: \n1) кількість додатніх чисел; \n2) кількість від’ємних чисел; \n3) середнєарифметичне від’ємних.\n")
            # Повідомляємо його про умову першої задачі
            filepath = input("Введіть шлях до файла із цифрами: \n") # Просимо ввести шляї до файла
            FnSol1(filepath) # Викликаємо функцію із введеним файлом

        elif function == "2": # Якщо користувач вводить 2
            print("\nЗадача 2. Задано три числа a, b, c цілі або дійсні. Виначити: \n1)чи можуть такі числа означати довжини відрізків; \n2)якщо означають, то чи можна з таких відрізків утворити трикутник і який – рівносторонній, рівнобедрений, різносторонній.\n")
            # Повідомляємо його про умову другої задачі
            a = float(input("Введіть значенння числа 'a': ").replace(",", "."))
            b = float(input("Введіть значенння числа 'b': ").replace(",", "."))
            c = float(input("Введіть значенння числа 'c': ").replace(",", ".")) # Просимо ввести числа необхідні для другої задачі
            FnSol2(a, b, c) # Виликаємо функцію із введеними даними

        elif function == "3": # Якщо користувач вводить 3
            print("\nЗадача 3. Задане речення поділити на слова і надрукувати їх в стовпчик.\n")
            # Повідомляємо його про умову третьої задачі
            sentence = input("Введіть речення: \n") # Просимо ввести речення для задачі
            FnSol3(sentence) # викликаємо функцію із введеним реченням

        elif function == "4": # Якщо користувач вводить 4
            print("\nЗадача 4. Задано двовимірний масив додатніх, від’ємних і нульових цілих чисел розміром NN.\nЗнайти підпрямокутник з найбільшою сумою. [ Оптимізація і швидкість не потрібні. ] \nПідпрямокутник – це будь-який неперервний підмасив прямокутної форми заданого масиву. \nСума підпрямокутника – це сума всіх його елементів.\n")
            # Повідомляємо його про умову четвертої задачі
            matrix_path = input("Введіть шлях до файла із матрицею: \n") # Просимо ввести шлях до файла із матрицею
            defoult_matrix_path = r"Testing_files\Task_4\InData_1.txt" # стандартний шлях до файла із матрицею

            if matrix_path == "": # Якщо користувач не вводить шлях до файла
                matrix_path = defoult_matrix_path # використовуємо стандартний

            matrix = read_matrix(matrix_path) # читаємо матрицію із файла який ввів користувач
            FnSol4(matrix) # викликаємов функцію до завдання 4

        elif function == "q": # якщо користувач вводить q
            print("\nФункцію завершено") # Повідомляємо про завершення функції
            break # завершаємо цикл та виконання функції

        else: # якщо користувач вводить незаданий символ
            print("\nВведено неправильну дію\n") # повідомляємо його про це і продовжуємо цикл
